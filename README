CIDRIZE

Intelligently take IP addresses, CIDRs, ranges, and wildcard matches to attempt return a valid list 
of IP addresses that can be worked with. Will automatically fix bad network boundries if it can.

The cidrize() function does all the work trying to parse IP addresses correctly.

    Input can be several formats:
        192.0.2.18     
        192.0.2.64/26  
        192.0.2.80-192.0.2.85
        192.0.2.170-175
        192.0.2.8[0-5]

Hyphenated ranges do not need to form a CIDR block. Netaddr does most of the heavy lifting for us here.

    Input can NOT be:
        192.0.2.0 0.0.0.255 (hostmask)
        192.0.2.0 255.255.255.0 (netmask)

Does NOT accept network or host mask notation, so don't bother trying.

Returns a list of consolidated netaddr objects. By default parsing exceptions will raise a CidrizeError (modular=True). 

You may pass modular=False to cause exceptions to be stripped & the error text will be returned as a list. This is intended for use with scripts or APIs out-of-the box.

The module may also be run interactively for debugging purposes.

DEPENDENCIES

netaddr
Pythonic manipulation of IPv4, IPv6, CIDR, EUI and MAC network addresses
http://pypi.python.org/pypi/netaddr/

pyparsing
Python parsing module
http://pypi.python.org/pypi/pyparsing/

EXAMPLES

>>> from cidrize import cidrize

Old-fashioned CIDR
>>> cidrize("1.2.3.4")
[IPNetwork('1.2.3.4/32')]

Hyphenated range
>>> cidrize("2.4.6.8-2.4.6.80")
[IPNetwork('2.4.6.8/29'), IPNetwork('2.4.6.16/28'), IPNetwork('2.4.6.32/27'), IPNetwork('2.4.6.64/28'), IPNetwork('2.4.6.80/32')]

Wildcard 
>>> c("15.63.148.*")
[IPNetwork('15.63.148.0/24')]

Bracketed range
>>> cidrize("21.43.180.1[40-99]")
[IPNetwork('21.43.180.140/30'), IPNetwork('21.43.180.144/28'), IPNetwork('21.43.180.160/27'), 
IPNetwork('21.43.180.192/29')]

Bad!
>>> cidrize("1.2.3.38/40")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "cidrize.py", line 145, in cidrize
    raise CidrizeError(err)
cidrize.CidrizeError: CIDR prefix /40 out of range for IPv4!

Wack range?!
>>> c("1.2.3.4-0")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "cidrize.py", line 145, in cidrize
    raise CidrizeError(err)
cidrize.CidrizeError: lower bound IP greater than upper bound!

CIDR TOOL

The cidrize package also comes with the 'cidr' command, which has two basic operations.  

Simple:

    % cidr 1.2.3.4/30
    1.2.3.4/30

Verbose:

    %cidr -v 1.2.3.4/30
    Spanning CIDR:          1.2.3.4/30
    Block Start/Network:    1.2.3.4
    1st host:               1.2.3.5
    Gateway:                1.2.3.6
    Block End/Broadcast:    1.2.3.7
    DQ Mask:                255.255.255.252
    Cisco ACL Mask:         0.0.0.3
    # of hosts:             2
    Explicit CIDR blocks:   1.2.3.4/30

And that's that!
